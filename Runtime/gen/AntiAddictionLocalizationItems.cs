// <auto-generated />
//
// To parse this JSON data, add NuGet 'LC.Newtonsoft.Json' then do:
//
//    using TapTap.AntiAddiction.Localization;
//
//    var antiAddictionLocalizationItems = AntiAddictionLocalizationItems.FromJson(jsonString);

namespace TapTap.AntiAddiction.Localization
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using LC.Newtonsoft.Json;
    using LC.Newtonsoft.Json.Converters;
	using TapTap.Common;

    public partial class AntiAddictionLocalizationItems
    {
        [JsonProperty("items")]
        public Items Items { get; set; }
		public Item Current
		{
			get
			{
				switch (TapTapAntiAddictionManager.AntiAddictionConfig.region)
				{
					default:
						return this.Items.Zhs;
					case Region.Vietnam:
						return this.Items.Vi;
				}
			}
		}
		public const string PATH = "Config/AntiAddictionLocalization";
    }

    public partial class Items
    {
        [JsonProperty("Zhs")]
        public Item Zhs { get; set; }

        [JsonProperty("En")]
        public Item En { get; set; }

        [JsonProperty("Id")]
        public Item Id { get; set; }

        [JsonProperty("Ja")]
        public Item Ja { get; set; }

        [JsonProperty("Ko")]
        public Item Ko { get; set; }

        [JsonProperty("Th")]
        public Item Th { get; set; }

        [JsonProperty("Zht")]
        public Item Zht { get; set; }
        
        [JsonProperty("De")]
        public Item De { get; set; }
        
        [JsonProperty("Es")]
        public Item Es { get; set; }
        
        [JsonProperty("Fr")]
        public Item Fr { get; set; }
        
        [JsonProperty("Pt")]
        public Item Pt { get; set; }
        
        [JsonProperty("Ru")]
        public Item Ru { get; set; }
        
        [JsonProperty("Tr")]
        public Item Tr { get; set; }
        
        [JsonProperty("Vi")]
        public Item Vi { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("NetError")]
        public string NetError { get; set; }

        [JsonProperty("NoVerification")]
        public string NoVerification { get; set; }

        [JsonProperty("EnterGame")]
        public string EnterGame { get; set; }

        [JsonProperty("ExitGame")]
        public string ExitGame { get; set; }

        [JsonProperty("Retry")]
        public string Retry { get; set; }
        
        [JsonProperty("OnVerified")]
        public string OnVerified { get; set; }
    }

    public partial class AntiAddictionLocalizationItems
    {
        public static AntiAddictionLocalizationItems FromJson(string json) => JsonConvert.DeserializeObject<AntiAddictionLocalizationItems>(json, TapTap.AntiAddiction.Localization.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AntiAddictionLocalizationItems self) => JsonConvert.SerializeObject(self, TapTap.AntiAddiction.Localization.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
